////////// Аргументы функций:
Позиционные аргументы
def print_name(first_name, last_name): 
  print(first_name, last_name)
 
print_name('Jiho', 'Baggins')


Аргументы ключевых слов
def print_name(first_name, last_name): 
  print(first_name, last_name)
 
print_name(last_name='Baggins', first_name='Jiho')

Аргументы по умолчанию
def print_name(first_name='Jiho', last_name='Baggins'): 
  print(first_name, last_name)
 
print_name()


tables = {
  1: ['Jiho', False],
  2: [],
  3: [],
  4: [],
  5: [],
  6: [],
  7: [],
}
print(tables)


def assign_table(table_number, name, vip_status=False): 
  tables[table_number] =  [name, vip_status]

assign_table(6, 'Yoni', False)
assign_table(table_number = 3, name = 'Martha', vip_status = True)
assign_table(4, 'Karla')
print(tables)

///////////// Переменное количество аргументов: *args

def my_function(*args):
  print(args) // ('Arg1', 245, False)
  
my_function('Arg1', 245, False)
//

def print_order(*order_items):
  print(order_items) // ('Orange Juice', 'Apple Juice', 'Scrambled Eggs', 'Pancakes')

print_order('Orange Juice', 'Apple Juice', 'Scrambled Eggs', 'Pancakes')
//

def shout_strings(*args):
  for argument in args:
    print(argument.upper()) // WORKING ON, LEARNING, ARGUMENT UNPACKING!
 
shout_strings('Working on', 'learning', 'argument unpacking!') 


def truncate_sentences(length, *sentences):
  for sentence in sentences:
    print(sentence[:length]) // What's g, Looks li
 
truncate_sentences(8, "What's going on here", "Looks like we've been cut off")

//
tables = {
  1: {
    'name': 'Jiho',
    'vip_status': False,
    'order': 'Orange Juice, Apple Juice'
  },
  2: {},
  3: {},
  4: {},
  5: {},
  6: {},
  7: {},
}
print(tables)

def assign_table(table_number, name, vip_status=False): 
  tables[table_number]['name'] = name
  tables[table_number]['vip_status'] = vip_status
  tables[table_number]['order'] = ''

# Write your code below: 
def assign_and_print_order(table_number, *order_items):
  tables[table_number]['order'] = order_items
  for order in order_items:
    print(order)

assign_table(2, 'Arwa', True)

assign_and_print_order(2, 'Steak', 'Seabass', 'Wine Bottle')
print(tables)

////////// Переменное количество аргументов: ** kwargs

def arbitrary_keyword_args(**kwargs):
  print(type(kwargs))
  print(kwargs)
  print(kwargs.get('anything_goes'))
 
arbitrary_keyword_args(this_arg='wowzers', anything_goes=101)
// output 
<class 'dict'>
{'this_arg': 'wowzers', 'anything_goes': 101}
101


tables = {
  1: {
    'name': 'Chioma',
    'vip_status': False,
    'order': {
      'drinks': 'Orange Juice, Apple Juice',
      'food_items': 'Pancakes'
    }
  },
  2: {},
  3: {},
  4: {},
  5: {},
  6: {},
  7: {},
}
print(tables)

def assign_food_items(**order_items):
  food = order_items.get('food')
  drinks = order_items.get('drinks')
  print(order_items)
  print(food)
  print(drinks)

assign_food_items(food='Pancakes, Poached Egg', drinks='Water')

//

def print_data(**data):
  for arg in data.values():
    print(arg) // arg1, True, 100
 
print_data(a='arg1', b=True, c=100)


def print_data(positional_arg, **data):
  print(positional_arg)
  for arg in data.values():
    print(arg) // position 1, arg1, True, 100
 
print_data('position 1', a='arg1', b=True, c=100)


tables = {
  1: {
    'name': 'Chioma',
    'vip_status': False,
    'order': {
      'drinks': 'Orange Juice, Apple Juice',
      'food_items': 'Pancakes'
    }
  },
  2: {},
  3: {},
  4: {},
  5: {},
  6: {},
  7: {},
}

def assign_table(table_number, name, vip_status=False): 
  tables[table_number]['name'] = name
  tables[table_number]['vip_status'] = vip_status
  tables[table_number]['order'] = {}

assign_table(2, 'Douglas', True)
print('--- tables with Douglas --- \n', tables)

def assign_food_items(table_number, **order_items):
  food = order_items.get('food')
  drinks = order_items.get('drinks')
  tables[table_number]['order']['food_items'] = food
  tables[table_number]['order']['drinks'] = drinks

print('\n --- tables after update --- \n')

assign_food_items(2, food = 'Seabass, Gnocchi, Pizza', drinks = 'Margarita, Water')
print(tables)

//

def print_animals(animal1, animal2, *args, animal4, **kwargs):
  print(animal1, animal2)
  print(args)
  print(animal4)
  print(kwargs)

print_animals('Snake', 'Fish', 'Guinea Pig', 'Owl', animal4='Cat', animal5='Dog') //output Snake Fish, ('Guinea Pig', 'Owl'), Cat, {'animal5': 'Dog'}

def single_prix_fixe_order(appetizer, *entrees, sides, **dessert_scoops):
  print(appetizer)
  print(entrees)
  print(sides)
  print(dessert_scoops)

single_prix_fixe_order('Baby Beets', 'Salmon', 'Scallops', sides = 'Mashed Potatoes', iceream_scoop_1 = 'Vanilla', iceream_scoop_2 = 'Cookies and Cream')

///////// Распаковка вызовов функций:

numbers  = {'num1': 3, 'num2': 6, 'num3': 9}
def sum(num1, num2, num3):
  print(num1 + num2 + num3) // 18
 
sum(**numbers)


start_and_stop = [3, 6]
range_values = range(*start_and_stop)
print(list(range_values)) // [3, 4, 5]


 a, *b, c = [3, 6, 9, 12, 15]
 print(b) // [6, 9, 12]


my_tuple = (3, 6, 9)
merged_tuple = (0, *my_tuple, 12)
print(merged_tuple) // (0, 3, 6, 9, 12)


num_collection = [3, 6, 9]
def power_two(*nums): 
  for num in nums:
    print(num**2) // 9 36 81
 
power_two(*num_collection)


def calculate_price_per_person(total, tip, split):
  total_tip = total * (tip/100)
  split_price = (total + total_tip) / split
  print(split_price)

table_7_total = [534.50, 20.0, 5]

calculate_price_per_person(*table_7_total)









































